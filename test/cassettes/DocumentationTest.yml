---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/introduction.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"4f2be6e2b3fa35a3455077c5bf770a2f71379579"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - C04A:47DE:313EA0:33329D:5BC5E5D5
      Content-Length:
      - '466'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:21:25 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1536-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1539696085.206319,VS0,VE125
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 5567ce4257e1e5006724f468d2b0b6a0e1d36931
      Expires:
      - Tue, 16 Oct 2018 13:26:25 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        IyBJbnRyb2R1Y3Rpb246IFF1J2VzdC1jZSBxdWUgQ0FUSU1BID8KCkNBVElNQSBlc3QgdW4gcHJvamV0IGluZm9ybWF0aXF1ZSBkw6l2ZWxvcHDDqSBwYXIgbGEgW0ZhY3VsdMOpIGRlcyBsZXR0cmVzXShodHRwczovL3VuaWwuY2gvbGV0dHJlcykgZXQgbGEgW0ZhY3VsdMOpIGRlcyBnw6lvc2NpZW5jZXMgZXQgZGUgbCdlbnZpcm9ubmVtZW50IChGR1NFKV0oaHR0cHM6Ly91bmlsLmNoL2dzZSkgZGUgbCdbVW5pdmVyc2l0w6kgZGUgTGF1c2FubmVdKGh0dHBzOi8vdW5pbC5jaC8pLiBMZSBsb2dpY2llbCBlc3QgYWNjZXNzaWJsZSB2aWEgbCdVUkwgW2NhdGltYS51bmlsLmNoXShodHRwczovL2NhdGltYS51bmlsLmNoKS4gCgpMZSBwcmluY2lwZSBkZSBDQVRJTUEgZXN0IGRlIHBlcm1ldHRyZSDDoCB1biB1dGlsaXNhdGV1ciBhdmVjIHBldSBkJ2V4cMOpcmllbmNlIGVuIGluZm9ybWF0aXF1ZSBkZSBjcsOpZXIgZGVzICoqY2F0YWxvZ3VlcyBkZSBkb2N1bWVudHMgc3RydWN0dXLDqXMqKiBlbiBsaWduZS4gCgpDQVRJTUEgZXN0IGVuIHF1ZWxxdWUgc29ydGUgdW5lIGFsdGVybmF0aXZlIGVuIGxpZ25lIMOgIHVuZSBiYXNlIGRlIGRvbm7DqWVzLCBjb21tZSBwYXIgZXhlbXBsZSBGaWxlTWFrZXIsIHRvdXQgZW4gcmVzdGFudCBhY2Nlc3NpYmxlIMOgIHRvdXQgcHVibGljLiAKCkNBVElNQSBwZXJtZXQgZGUgbmF2aWd1ZXIgZmFjaWxlbWVudCDDoCB0cmF2ZXJzIGxlcyBkb25uw6llcywgZGUgY2hlcmNoZXIgZGVzIG9iamV0cyBldCBwZXJtZXQgYXV4IMOpZGl0ZXVycyBkJ2Fqb3V0ZXIgZXQgZGUgbW9kaWZpZXIgbGVzIGRvbm7DqWVzLgo=
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:21:25 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/introduction.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"4f2be6e2b3fa35a3455077c5bf770a2f71379579"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - C04A:47DE:313EA0:33329D:5BC5E5D5
      Content-Length:
      - '466'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:21:25 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1533-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1539696085.423767,VS0,VE1
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 3bdbee362b5734027c7236733ef5e526a616e6d5
      Expires:
      - Tue, 16 Oct 2018 13:26:25 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        IyBJbnRyb2R1Y3Rpb246IFF1J2VzdC1jZSBxdWUgQ0FUSU1BID8KCkNBVElNQSBlc3QgdW4gcHJvamV0IGluZm9ybWF0aXF1ZSBkw6l2ZWxvcHDDqSBwYXIgbGEgW0ZhY3VsdMOpIGRlcyBsZXR0cmVzXShodHRwczovL3VuaWwuY2gvbGV0dHJlcykgZXQgbGEgW0ZhY3VsdMOpIGRlcyBnw6lvc2NpZW5jZXMgZXQgZGUgbCdlbnZpcm9ubmVtZW50IChGR1NFKV0oaHR0cHM6Ly91bmlsLmNoL2dzZSkgZGUgbCdbVW5pdmVyc2l0w6kgZGUgTGF1c2FubmVdKGh0dHBzOi8vdW5pbC5jaC8pLiBMZSBsb2dpY2llbCBlc3QgYWNjZXNzaWJsZSB2aWEgbCdVUkwgW2NhdGltYS51bmlsLmNoXShodHRwczovL2NhdGltYS51bmlsLmNoKS4gCgpMZSBwcmluY2lwZSBkZSBDQVRJTUEgZXN0IGRlIHBlcm1ldHRyZSDDoCB1biB1dGlsaXNhdGV1ciBhdmVjIHBldSBkJ2V4cMOpcmllbmNlIGVuIGluZm9ybWF0aXF1ZSBkZSBjcsOpZXIgZGVzICoqY2F0YWxvZ3VlcyBkZSBkb2N1bWVudHMgc3RydWN0dXLDqXMqKiBlbiBsaWduZS4gCgpDQVRJTUEgZXN0IGVuIHF1ZWxxdWUgc29ydGUgdW5lIGFsdGVybmF0aXZlIGVuIGxpZ25lIMOgIHVuZSBiYXNlIGRlIGRvbm7DqWVzLCBjb21tZSBwYXIgZXhlbXBsZSBGaWxlTWFrZXIsIHRvdXQgZW4gcmVzdGFudCBhY2Nlc3NpYmxlIMOgIHRvdXQgcHVibGljLiAKCkNBVElNQSBwZXJtZXQgZGUgbmF2aWd1ZXIgZmFjaWxlbWVudCDDoCB0cmF2ZXJzIGxlcyBkb25uw6llcywgZGUgY2hlcmNoZXIgZGVzIG9iamV0cyBldCBwZXJtZXQgYXV4IMOpZGl0ZXVycyBkJ2Fqb3V0ZXIgZXQgZGUgbW9kaWZpZXIgbGVzIGRvbm7DqWVzLgo=
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:21:25 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/introduction.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"4f2be6e2b3fa35a3455077c5bf770a2f71379579"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - C04A:47DE:313EA0:33329D:5BC5E5D5
      Content-Length:
      - '466'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:21:25 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1538-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1539696086.517686,VS0,VE0
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 66d1272de29155fa81684e0e20eda7b447649024
      Expires:
      - Tue, 16 Oct 2018 13:26:25 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        IyBJbnRyb2R1Y3Rpb246IFF1J2VzdC1jZSBxdWUgQ0FUSU1BID8KCkNBVElNQSBlc3QgdW4gcHJvamV0IGluZm9ybWF0aXF1ZSBkw6l2ZWxvcHDDqSBwYXIgbGEgW0ZhY3VsdMOpIGRlcyBsZXR0cmVzXShodHRwczovL3VuaWwuY2gvbGV0dHJlcykgZXQgbGEgW0ZhY3VsdMOpIGRlcyBnw6lvc2NpZW5jZXMgZXQgZGUgbCdlbnZpcm9ubmVtZW50IChGR1NFKV0oaHR0cHM6Ly91bmlsLmNoL2dzZSkgZGUgbCdbVW5pdmVyc2l0w6kgZGUgTGF1c2FubmVdKGh0dHBzOi8vdW5pbC5jaC8pLiBMZSBsb2dpY2llbCBlc3QgYWNjZXNzaWJsZSB2aWEgbCdVUkwgW2NhdGltYS51bmlsLmNoXShodHRwczovL2NhdGltYS51bmlsLmNoKS4gCgpMZSBwcmluY2lwZSBkZSBDQVRJTUEgZXN0IGRlIHBlcm1ldHRyZSDDoCB1biB1dGlsaXNhdGV1ciBhdmVjIHBldSBkJ2V4cMOpcmllbmNlIGVuIGluZm9ybWF0aXF1ZSBkZSBjcsOpZXIgZGVzICoqY2F0YWxvZ3VlcyBkZSBkb2N1bWVudHMgc3RydWN0dXLDqXMqKiBlbiBsaWduZS4gCgpDQVRJTUEgZXN0IGVuIHF1ZWxxdWUgc29ydGUgdW5lIGFsdGVybmF0aXZlIGVuIGxpZ25lIMOgIHVuZSBiYXNlIGRlIGRvbm7DqWVzLCBjb21tZSBwYXIgZXhlbXBsZSBGaWxlTWFrZXIsIHRvdXQgZW4gcmVzdGFudCBhY2Nlc3NpYmxlIMOgIHRvdXQgcHVibGljLiAKCkNBVElNQSBwZXJtZXQgZGUgbmF2aWd1ZXIgZmFjaWxlbWVudCDDoCB0cmF2ZXJzIGxlcyBkb25uw6llcywgZGUgY2hlcmNoZXIgZGVzIG9iamV0cyBldCBwZXJtZXQgYXV4IMOpZGl0ZXVycyBkJ2Fqb3V0ZXIgZXQgZGUgbW9kaWZpZXIgbGVzIGRvbm7DqWVzLgo=
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:21:25 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/guest.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"e864d40cf9e95259d6beb5d46419abd21faf8c0d"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - 5A10:0B45:1B53F:1FE7F:5BC5E5D5
      Content-Length:
      - '823'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:21:25 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1536-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1539696086.621853,VS0,VE114
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 9b78922503805529d6b14c4a4362d7ea77a01495
      Expires:
      - Tue, 16 Oct 2018 13:26:25 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        IyBSZWNoZXJjaGUKCkxlcyBjYXRhbG9ndWVzIGRlIENBVElNQSBkaXNwb3NlbnQgZCd1bmUgZm9uY3Rpb25uYWxpdMOpIGRlIHJlY2hlcmNoZSBwZXJtZXR0YW50IGQnYWNjw6lkZXIgYXUgY29udGVudSBkdSBjYXRhbG9ndWUgcGFyIGxlIGJpYWlzIGRlIG1vdHMtY2zDqXMuIElsIGVzdCBwb3NzaWJsZSBkJ2VmZmVjdHVlciB1bmUgcmVjaGVyY2hlIHNpbXBsZSAocmVjaGVyY2hlIGQndW4gbW90LCBleHByZXNzaW9uKSBvdSB1bmUgcmVjaGVyY2hlIGF2YW5jw6llIHBlcm1ldHRhbnQgZGUgY2hlcmNoZXIgZHUgY29udGVudSBhdSBtb3llbiBkZSB1biBwbHVzaWV1cnMgY3JpdMOocmVzICgiZXhwcmVzc2lvbiBleGFjdGUiLCAiY29udGllbnQgbGVzIG1vdHMiLCAibmUgY29udGllbnQgcGFzIGxlcyBtb3RzIikuCgpMZXMgcmVjaGVyY2hlcyBzaW1wbGUgZXQgYXZhbmPDqWVzIHNvbnQgYWNjZXNzaWJsZXMgZGVwdWlzIGxhIHBhZ2UgZCdhY2N1ZWlsIGR1IGNhdGFsb2d1ZSwgZW4gY2xpcXVhbnQgc3VyIGxlIG5vbSBkdSBjYXRhbG9ndWUgdG91dCDDoCBnYXVjaGUgZGUgbGEgYmFycmUgZGUgbWVudXMgOgoKIVtdKGFzc2V0cy9zZWFyY2gvc2VhcmNoLnBuZykKCiMjIFJlY2hlcmNoZSBzaW1wbGUKCkxhIHJlY2hlcmNoZSBzaW1wbGUgcGVybWV0IGQnYWNjw6lkZXIgw6AgdW5lIGxpc3RlIGRlIGNvbnRlbnVzIGNvbnRlbmFudCB1biBtb3Qgb3UgdW5lIGV4cHJlc3Npb24gKGNoYcOubmUgZGUgY2FyYWN0w6hyZXMpLiAKCkRhbnMgbGEgYmFycmUgZGUgdGV4dGUsIGVudHJlciBsZSBtb3Qgc291aGFpdMOpIChwLmV4ICJSb3dsaW5nIiBvdSAiU3Vpc3NlIikgZXQgY2xpcXVlciBzdXIgIipDaGVyY2hlcioiICgiU2VhcmNoIikuIFVuZSBsaXN0ZSBkZXMgcsOpc3VsdGF0cyB0cm91dsOpcyBhcHBhcmHDrnQgcGVybWV0dGFudCBkJ2FjY8OpZGVyIGF1IGNvbnRlbnUgc291aGFpdMOpLCBvdSBkZSByw6lpdMOpcmVyIHNhIHJlY2hlcmNoZS4KCiMjIFJlY2hlcmNoZSBhdmFuY8OpZQoKTGEgcmVjaGVyY2hlIGF2YW5jw6llIHBlcm1ldCBkZSBkJ2FjY8OpZGVyIMOgIHVuZSBsaXN0ZSBkZSBjb250ZW51cyBlbiB1dGlsaXNhbnQgdW4gb3UgcGx1c2lldXJzIGNyaXTDqHJlcyBkZSByZWNoZXJjaGUgYXUgc2VpbiBkJ3VuIHR5cGUgZGUgZmljaGUuIAoKUG91ciBhY2PDqWRlciDDoCBsYSByZWNoZXJjaGUgYXZhbmPDqWUsIGNsaXF1ZXIgc3VyICIqQXZhbmPDqSoiICgiQWR2YW5jZWQiKS4gVW5lIHBhZ2UgcydvdXZyZSwgcHLDqXNlbnRhbnQgbGVzIGRpZmbDqXJlbnRzIHR5cGVzIGRlIGZpY2hlcyAobGUgcHJlbWllciB0eXBlIGRlIGZpY2hlIHMnb3V2cmUgcGFyIGTDqWZhdXQpIDogCgohW10oYXNzZXRzL3NlYXJjaC9hZHZfc2VhcmNoLnBuZykKClBvdXIgZWZmZWN0dWVyIHVuZSByZWNoZXJjaGUgZGFucyB1biB0eXBlIGRlIGZpY2hlLCBzw6lsZWN0aW9ubmVyIGNlbHVpLWNpIHBhcm1pIGxlcyBvbmdsZXRzIDogbGVzIGNoYW1wcyBxdWkgbGUgY29tcG9zZW50IHMnYWZmaWNoZW50IDogIAoKSWwgZXN0IHBvc3NpYmxlIGRlIGNoZXJjaGVyIGRlcyBtb3RzIG91IGV4cHJlc3Npb25zIGV4YWN0ZXMgZGFucyBsZXMgY2hhbXBzIGRlIHRleHRlcyBvdSBkZSBzw6lsZWN0aW9ubmVyIHVuIGNob2l4IGRhbnMgbGVzIGNoYW1wcyAnZW5zZW1ibGVzIGRlIGNob2l4Jy4KClVuZSBmb2lzIGxlcyBkaWZmw6lyZW50cyBjaGFtcHMgc291aGFpdMOpcyByZW1wbGlzLCBjbGlxdWVyIHN1ciAiKkNoZXJjaGVyKiIgKCJTZWFyY2giKS4gVW5lIGxpc3RlIGRlcyByw6lzdWx0YXRzIHRyb3V2w6lzIGFwcGFyYcOudCBwZXJtZXR0YW50IGQnYWNjw6lkZXIgYXUgY29udGVudSBzb3VoYWl0w6kuIFBvdXIgbW9kaWZpZXIgbGEgcmVjaGVyY2hlLCByZXZlbmlyIGVuIGFycmnDqHJlIMOgIGwnYWlkZSBkdSBib3V0b24gcHLDqWPDqWRlbnQgKDwtKSBkZSB2b3RyZSBuYXZpZ2F0ZXVyLgo=
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:21:25 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/guest.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"e864d40cf9e95259d6beb5d46419abd21faf8c0d"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - 5A10:0B45:1B53F:1FE7F:5BC5E5D5
      Content-Length:
      - '823'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:21:25 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1528-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1539696086.832280,VS0,VE0
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 941b334a3863b7335094cb2ff515ba2d9509956d
      Expires:
      - Tue, 16 Oct 2018 13:26:25 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        IyBSZWNoZXJjaGUKCkxlcyBjYXRhbG9ndWVzIGRlIENBVElNQSBkaXNwb3NlbnQgZCd1bmUgZm9uY3Rpb25uYWxpdMOpIGRlIHJlY2hlcmNoZSBwZXJtZXR0YW50IGQnYWNjw6lkZXIgYXUgY29udGVudSBkdSBjYXRhbG9ndWUgcGFyIGxlIGJpYWlzIGRlIG1vdHMtY2zDqXMuIElsIGVzdCBwb3NzaWJsZSBkJ2VmZmVjdHVlciB1bmUgcmVjaGVyY2hlIHNpbXBsZSAocmVjaGVyY2hlIGQndW4gbW90LCBleHByZXNzaW9uKSBvdSB1bmUgcmVjaGVyY2hlIGF2YW5jw6llIHBlcm1ldHRhbnQgZGUgY2hlcmNoZXIgZHUgY29udGVudSBhdSBtb3llbiBkZSB1biBwbHVzaWV1cnMgY3JpdMOocmVzICgiZXhwcmVzc2lvbiBleGFjdGUiLCAiY29udGllbnQgbGVzIG1vdHMiLCAibmUgY29udGllbnQgcGFzIGxlcyBtb3RzIikuCgpMZXMgcmVjaGVyY2hlcyBzaW1wbGUgZXQgYXZhbmPDqWVzIHNvbnQgYWNjZXNzaWJsZXMgZGVwdWlzIGxhIHBhZ2UgZCdhY2N1ZWlsIGR1IGNhdGFsb2d1ZSwgZW4gY2xpcXVhbnQgc3VyIGxlIG5vbSBkdSBjYXRhbG9ndWUgdG91dCDDoCBnYXVjaGUgZGUgbGEgYmFycmUgZGUgbWVudXMgOgoKIVtdKGFzc2V0cy9zZWFyY2gvc2VhcmNoLnBuZykKCiMjIFJlY2hlcmNoZSBzaW1wbGUKCkxhIHJlY2hlcmNoZSBzaW1wbGUgcGVybWV0IGQnYWNjw6lkZXIgw6AgdW5lIGxpc3RlIGRlIGNvbnRlbnVzIGNvbnRlbmFudCB1biBtb3Qgb3UgdW5lIGV4cHJlc3Npb24gKGNoYcOubmUgZGUgY2FyYWN0w6hyZXMpLiAKCkRhbnMgbGEgYmFycmUgZGUgdGV4dGUsIGVudHJlciBsZSBtb3Qgc291aGFpdMOpIChwLmV4ICJSb3dsaW5nIiBvdSAiU3Vpc3NlIikgZXQgY2xpcXVlciBzdXIgIipDaGVyY2hlcioiICgiU2VhcmNoIikuIFVuZSBsaXN0ZSBkZXMgcsOpc3VsdGF0cyB0cm91dsOpcyBhcHBhcmHDrnQgcGVybWV0dGFudCBkJ2FjY8OpZGVyIGF1IGNvbnRlbnUgc291aGFpdMOpLCBvdSBkZSByw6lpdMOpcmVyIHNhIHJlY2hlcmNoZS4KCiMjIFJlY2hlcmNoZSBhdmFuY8OpZQoKTGEgcmVjaGVyY2hlIGF2YW5jw6llIHBlcm1ldCBkZSBkJ2FjY8OpZGVyIMOgIHVuZSBsaXN0ZSBkZSBjb250ZW51cyBlbiB1dGlsaXNhbnQgdW4gb3UgcGx1c2lldXJzIGNyaXTDqHJlcyBkZSByZWNoZXJjaGUgYXUgc2VpbiBkJ3VuIHR5cGUgZGUgZmljaGUuIAoKUG91ciBhY2PDqWRlciDDoCBsYSByZWNoZXJjaGUgYXZhbmPDqWUsIGNsaXF1ZXIgc3VyICIqQXZhbmPDqSoiICgiQWR2YW5jZWQiKS4gVW5lIHBhZ2UgcydvdXZyZSwgcHLDqXNlbnRhbnQgbGVzIGRpZmbDqXJlbnRzIHR5cGVzIGRlIGZpY2hlcyAobGUgcHJlbWllciB0eXBlIGRlIGZpY2hlIHMnb3V2cmUgcGFyIGTDqWZhdXQpIDogCgohW10oYXNzZXRzL3NlYXJjaC9hZHZfc2VhcmNoLnBuZykKClBvdXIgZWZmZWN0dWVyIHVuZSByZWNoZXJjaGUgZGFucyB1biB0eXBlIGRlIGZpY2hlLCBzw6lsZWN0aW9ubmVyIGNlbHVpLWNpIHBhcm1pIGxlcyBvbmdsZXRzIDogbGVzIGNoYW1wcyBxdWkgbGUgY29tcG9zZW50IHMnYWZmaWNoZW50IDogIAoKSWwgZXN0IHBvc3NpYmxlIGRlIGNoZXJjaGVyIGRlcyBtb3RzIG91IGV4cHJlc3Npb25zIGV4YWN0ZXMgZGFucyBsZXMgY2hhbXBzIGRlIHRleHRlcyBvdSBkZSBzw6lsZWN0aW9ubmVyIHVuIGNob2l4IGRhbnMgbGVzIGNoYW1wcyAnZW5zZW1ibGVzIGRlIGNob2l4Jy4KClVuZSBmb2lzIGxlcyBkaWZmw6lyZW50cyBjaGFtcHMgc291aGFpdMOpcyByZW1wbGlzLCBjbGlxdWVyIHN1ciAiKkNoZXJjaGVyKiIgKCJTZWFyY2giKS4gVW5lIGxpc3RlIGRlcyByw6lzdWx0YXRzIHRyb3V2w6lzIGFwcGFyYcOudCBwZXJtZXR0YW50IGQnYWNjw6lkZXIgYXUgY29udGVudSBzb3VoYWl0w6kuIFBvdXIgbW9kaWZpZXIgbGEgcmVjaGVyY2hlLCByZXZlbmlyIGVuIGFycmnDqHJlIMOgIGwnYWlkZSBkdSBib3V0b24gcHLDqWPDqWRlbnQgKDwtKSBkZSB2b3RyZSBuYXZpZ2F0ZXVyLgo=
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:21:25 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/guest.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"e864d40cf9e95259d6beb5d46419abd21faf8c0d"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - 5A10:0B45:1B53F:1FE7F:5BC5E5D5
      Content-Length:
      - '823'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:21:25 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1541-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1539696086.937508,VS0,VE1
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 91490519a956809f861260de7f459b6edcf7e2e7
      Expires:
      - Tue, 16 Oct 2018 13:26:25 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        IyBSZWNoZXJjaGUKCkxlcyBjYXRhbG9ndWVzIGRlIENBVElNQSBkaXNwb3NlbnQgZCd1bmUgZm9uY3Rpb25uYWxpdMOpIGRlIHJlY2hlcmNoZSBwZXJtZXR0YW50IGQnYWNjw6lkZXIgYXUgY29udGVudSBkdSBjYXRhbG9ndWUgcGFyIGxlIGJpYWlzIGRlIG1vdHMtY2zDqXMuIElsIGVzdCBwb3NzaWJsZSBkJ2VmZmVjdHVlciB1bmUgcmVjaGVyY2hlIHNpbXBsZSAocmVjaGVyY2hlIGQndW4gbW90LCBleHByZXNzaW9uKSBvdSB1bmUgcmVjaGVyY2hlIGF2YW5jw6llIHBlcm1ldHRhbnQgZGUgY2hlcmNoZXIgZHUgY29udGVudSBhdSBtb3llbiBkZSB1biBwbHVzaWV1cnMgY3JpdMOocmVzICgiZXhwcmVzc2lvbiBleGFjdGUiLCAiY29udGllbnQgbGVzIG1vdHMiLCAibmUgY29udGllbnQgcGFzIGxlcyBtb3RzIikuCgpMZXMgcmVjaGVyY2hlcyBzaW1wbGUgZXQgYXZhbmPDqWVzIHNvbnQgYWNjZXNzaWJsZXMgZGVwdWlzIGxhIHBhZ2UgZCdhY2N1ZWlsIGR1IGNhdGFsb2d1ZSwgZW4gY2xpcXVhbnQgc3VyIGxlIG5vbSBkdSBjYXRhbG9ndWUgdG91dCDDoCBnYXVjaGUgZGUgbGEgYmFycmUgZGUgbWVudXMgOgoKIVtdKGFzc2V0cy9zZWFyY2gvc2VhcmNoLnBuZykKCiMjIFJlY2hlcmNoZSBzaW1wbGUKCkxhIHJlY2hlcmNoZSBzaW1wbGUgcGVybWV0IGQnYWNjw6lkZXIgw6AgdW5lIGxpc3RlIGRlIGNvbnRlbnVzIGNvbnRlbmFudCB1biBtb3Qgb3UgdW5lIGV4cHJlc3Npb24gKGNoYcOubmUgZGUgY2FyYWN0w6hyZXMpLiAKCkRhbnMgbGEgYmFycmUgZGUgdGV4dGUsIGVudHJlciBsZSBtb3Qgc291aGFpdMOpIChwLmV4ICJSb3dsaW5nIiBvdSAiU3Vpc3NlIikgZXQgY2xpcXVlciBzdXIgIipDaGVyY2hlcioiICgiU2VhcmNoIikuIFVuZSBsaXN0ZSBkZXMgcsOpc3VsdGF0cyB0cm91dsOpcyBhcHBhcmHDrnQgcGVybWV0dGFudCBkJ2FjY8OpZGVyIGF1IGNvbnRlbnUgc291aGFpdMOpLCBvdSBkZSByw6lpdMOpcmVyIHNhIHJlY2hlcmNoZS4KCiMjIFJlY2hlcmNoZSBhdmFuY8OpZQoKTGEgcmVjaGVyY2hlIGF2YW5jw6llIHBlcm1ldCBkZSBkJ2FjY8OpZGVyIMOgIHVuZSBsaXN0ZSBkZSBjb250ZW51cyBlbiB1dGlsaXNhbnQgdW4gb3UgcGx1c2lldXJzIGNyaXTDqHJlcyBkZSByZWNoZXJjaGUgYXUgc2VpbiBkJ3VuIHR5cGUgZGUgZmljaGUuIAoKUG91ciBhY2PDqWRlciDDoCBsYSByZWNoZXJjaGUgYXZhbmPDqWUsIGNsaXF1ZXIgc3VyICIqQXZhbmPDqSoiICgiQWR2YW5jZWQiKS4gVW5lIHBhZ2UgcydvdXZyZSwgcHLDqXNlbnRhbnQgbGVzIGRpZmbDqXJlbnRzIHR5cGVzIGRlIGZpY2hlcyAobGUgcHJlbWllciB0eXBlIGRlIGZpY2hlIHMnb3V2cmUgcGFyIGTDqWZhdXQpIDogCgohW10oYXNzZXRzL3NlYXJjaC9hZHZfc2VhcmNoLnBuZykKClBvdXIgZWZmZWN0dWVyIHVuZSByZWNoZXJjaGUgZGFucyB1biB0eXBlIGRlIGZpY2hlLCBzw6lsZWN0aW9ubmVyIGNlbHVpLWNpIHBhcm1pIGxlcyBvbmdsZXRzIDogbGVzIGNoYW1wcyBxdWkgbGUgY29tcG9zZW50IHMnYWZmaWNoZW50IDogIAoKSWwgZXN0IHBvc3NpYmxlIGRlIGNoZXJjaGVyIGRlcyBtb3RzIG91IGV4cHJlc3Npb25zIGV4YWN0ZXMgZGFucyBsZXMgY2hhbXBzIGRlIHRleHRlcyBvdSBkZSBzw6lsZWN0aW9ubmVyIHVuIGNob2l4IGRhbnMgbGVzIGNoYW1wcyAnZW5zZW1ibGVzIGRlIGNob2l4Jy4KClVuZSBmb2lzIGxlcyBkaWZmw6lyZW50cyBjaGFtcHMgc291aGFpdMOpcyByZW1wbGlzLCBjbGlxdWVyIHN1ciAiKkNoZXJjaGVyKiIgKCJTZWFyY2giKS4gVW5lIGxpc3RlIGRlcyByw6lzdWx0YXRzIHRyb3V2w6lzIGFwcGFyYcOudCBwZXJtZXR0YW50IGQnYWNjw6lkZXIgYXUgY29udGVudSBzb3VoYWl0w6kuIFBvdXIgbW9kaWZpZXIgbGEgcmVjaGVyY2hlLCByZXZlbmlyIGVuIGFycmnDqHJlIMOgIGwnYWlkZSBkdSBib3V0b24gcHLDqWPDqWRlbnQgKDwtKSBkZSB2b3RyZSBuYXZpZ2F0ZXVyLgo=
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:21:25 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/user.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"1e6276d857722c3cefd74ae8359e88c5ee26aff2"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - 7008:6A7B:394C01:3C9436:5BC5E9CE
      Content-Length:
      - '596'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:38:22 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1537-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1539697102.146106,VS0,VE137
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 930c94b7b62c031c4cc84ae354696df8aeffc8dc
      Expires:
      - Tue, 16 Oct 2018 13:43:22 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        IyBGYXZvcmlzCgpMZXMgY2F0YWxvZ3VlcyBkZSBDQVRJTUEgZGlzcG9zZW50IGQndW5lIGZvbmN0aW9ubmFsaXTDqSBwZXJtZXR0YW50IGQnYWpvdXRlciB1biBjb250ZW51IMOgIHVuZSBsaXN0ZSBkZSBmYXZvcmlzIHBvdXIgdG91cy10ZXMgbGVzIHV0aWxpc2F0ZXVyLXRyaWNlLXMgcG9zc8OpZGFudCB1biBjb21wdGUgQ0FUSUEgKHZvaXIgW2ljaSBwb3VyIGxhIGNyw6lhdGlvbiBkJ3VuIGNvbXB0ZV0oaHR0cHM6Ly9jYXRpbWEudW5pbC5jaC9mci9yZWdpc3RlcikpIGV0IGNvbm5lY3TDqS1lLXMuCgojIyBBam91dCBkJ3VuIGNvbnRlbnUgw6AgbGEgbGlzdGUgZGVzIGZhdm9yaXMKClBvdXIgYWpvdXRlciB1biBjb250ZW51IGF1eCBmYXZvcmlzLCBpbCBzJ2FnaXQgZCdhY2PDqWRlciDDoCBsYSBmaWNoZSBzb3VoYWl0w6llIChwYXIgdW5lIG5hdmlnYXRpb24gZGFucyBsZSBzaXRlIG91IHBhciBwYXIgbGVzIHLDqXN1bHRhdHMgZCd1bmUgcmVjaGVyY2hlKSwgcHVpcyBkZSBjbGlxdWVyIHN1ciBsZSBib3V0b24gIkFqb3V0ZXIgYXV4IGZhdm9yaXMiIHNvdXMgbGUgbm9tIGRlIGxhIGZpY2hlLgoKIVtdKGFzc2V0cy9mYXZzL2FkZF9mYXYucG5nKQoKIyMgQWNjw6hzIMOgIGxhIGxpc3RlIGRlcyBmYXZvcmlzCgpMYSBsaXN0ZSBkZXMgZmF2b3JpcyBlc3QgYWNjZXNzaWJsZSDDoCAKdG91cy10ZSB1dGlsaXNhdGV1ci10cmljZSBpbnNjcml0LWUgZXQgY29ubmVjdMOpIMOgIENhdGltYSwgZW4gY2xpcXVhbnQgc3VjY2Vzc2l2ZW1lbnQgc3VyIAoKMS4gKipOb20gZCd1dGlsaXNhdGV1cioqICh0b3V0IMOgIGRyb2l0ZSBkYW5zIGxhIGJhcnJlIGRlIG5hdmlnYXRpb24pCjIuICoqTWVzIGZhdm9yaXMqKgoKIVtdKGFzc2V0cy9mYXZzL2FjY2Vzc19mYXYucG5nKQoKTGVzIGZhdm9yaXMgc29udCBwcsOpc2VudMOpcyBwYXIgZ3JvdXBlIGVuIGZvbmN0aW9uIGR1IGNhdGFsb2d1ZSBkb250IHByb3ZpZW5uZW50IGxlcyBjb250ZW51cyA6IAoKIVtdKGFzc2V0cy9mYXZzL2Zhdl9saXN0X2dyb3VwMS5wbmcpCgpVbmUgZm9pcyB1biBncm91cGUgY2hvaXNpLCBsYSBsaXN0ZSBkZXMgY29udGVudXMgZmF2b3JpcyBlc3QgcHLDqXNlbnTDqWUsIHBlcm1ldHRhbnQgZCd5IGFjY8OpZGVyIG91IGRlIHN1cHByaW1lciBsZS1zIGZhdm9yaXMgc291aGFpdMOpLXMuCgohW10oYXNzZXRzL2ZhdnMvZmF2X2xpc3RfZ3JvdXAyLnBuZyk=
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:38:22 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/user.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"1e6276d857722c3cefd74ae8359e88c5ee26aff2"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - 7008:6A7B:394C01:3C9436:5BC5E9CE
      Content-Length:
      - '596'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:38:22 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1535-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1539697102.378149,VS0,VE0
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 4e7605b6398197af94ef1809d135e24814a8e040
      Expires:
      - Tue, 16 Oct 2018 13:43:22 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        IyBGYXZvcmlzCgpMZXMgY2F0YWxvZ3VlcyBkZSBDQVRJTUEgZGlzcG9zZW50IGQndW5lIGZvbmN0aW9ubmFsaXTDqSBwZXJtZXR0YW50IGQnYWpvdXRlciB1biBjb250ZW51IMOgIHVuZSBsaXN0ZSBkZSBmYXZvcmlzIHBvdXIgdG91cy10ZXMgbGVzIHV0aWxpc2F0ZXVyLXRyaWNlLXMgcG9zc8OpZGFudCB1biBjb21wdGUgQ0FUSUEgKHZvaXIgW2ljaSBwb3VyIGxhIGNyw6lhdGlvbiBkJ3VuIGNvbXB0ZV0oaHR0cHM6Ly9jYXRpbWEudW5pbC5jaC9mci9yZWdpc3RlcikpIGV0IGNvbm5lY3TDqS1lLXMuCgojIyBBam91dCBkJ3VuIGNvbnRlbnUgw6AgbGEgbGlzdGUgZGVzIGZhdm9yaXMKClBvdXIgYWpvdXRlciB1biBjb250ZW51IGF1eCBmYXZvcmlzLCBpbCBzJ2FnaXQgZCdhY2PDqWRlciDDoCBsYSBmaWNoZSBzb3VoYWl0w6llIChwYXIgdW5lIG5hdmlnYXRpb24gZGFucyBsZSBzaXRlIG91IHBhciBwYXIgbGVzIHLDqXN1bHRhdHMgZCd1bmUgcmVjaGVyY2hlKSwgcHVpcyBkZSBjbGlxdWVyIHN1ciBsZSBib3V0b24gIkFqb3V0ZXIgYXV4IGZhdm9yaXMiIHNvdXMgbGUgbm9tIGRlIGxhIGZpY2hlLgoKIVtdKGFzc2V0cy9mYXZzL2FkZF9mYXYucG5nKQoKIyMgQWNjw6hzIMOgIGxhIGxpc3RlIGRlcyBmYXZvcmlzCgpMYSBsaXN0ZSBkZXMgZmF2b3JpcyBlc3QgYWNjZXNzaWJsZSDDoCAKdG91cy10ZSB1dGlsaXNhdGV1ci10cmljZSBpbnNjcml0LWUgZXQgY29ubmVjdMOpIMOgIENhdGltYSwgZW4gY2xpcXVhbnQgc3VjY2Vzc2l2ZW1lbnQgc3VyIAoKMS4gKipOb20gZCd1dGlsaXNhdGV1cioqICh0b3V0IMOgIGRyb2l0ZSBkYW5zIGxhIGJhcnJlIGRlIG5hdmlnYXRpb24pCjIuICoqTWVzIGZhdm9yaXMqKgoKIVtdKGFzc2V0cy9mYXZzL2FjY2Vzc19mYXYucG5nKQoKTGVzIGZhdm9yaXMgc29udCBwcsOpc2VudMOpcyBwYXIgZ3JvdXBlIGVuIGZvbmN0aW9uIGR1IGNhdGFsb2d1ZSBkb250IHByb3ZpZW5uZW50IGxlcyBjb250ZW51cyA6IAoKIVtdKGFzc2V0cy9mYXZzL2Zhdl9saXN0X2dyb3VwMS5wbmcpCgpVbmUgZm9pcyB1biBncm91cGUgY2hvaXNpLCBsYSBsaXN0ZSBkZXMgY29udGVudXMgZmF2b3JpcyBlc3QgcHLDqXNlbnTDqWUsIHBlcm1ldHRhbnQgZCd5IGFjY8OpZGVyIG91IGRlIHN1cHByaW1lciBsZS1zIGZhdm9yaXMgc291aGFpdMOpLXMuCgohW10oYXNzZXRzL2ZhdnMvZmF2X2xpc3RfZ3JvdXAyLnBuZyk=
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:38:22 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/user.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"1e6276d857722c3cefd74ae8359e88c5ee26aff2"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - 7008:6A7B:394C01:3C9436:5BC5E9CE
      Content-Length:
      - '596'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:38:22 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1549-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1539697102.473397,VS0,VE1
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - b41f5fb97ef67497d11a39ec2b6bd20aad983e82
      Expires:
      - Tue, 16 Oct 2018 13:43:22 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        IyBGYXZvcmlzCgpMZXMgY2F0YWxvZ3VlcyBkZSBDQVRJTUEgZGlzcG9zZW50IGQndW5lIGZvbmN0aW9ubmFsaXTDqSBwZXJtZXR0YW50IGQnYWpvdXRlciB1biBjb250ZW51IMOgIHVuZSBsaXN0ZSBkZSBmYXZvcmlzIHBvdXIgdG91cy10ZXMgbGVzIHV0aWxpc2F0ZXVyLXRyaWNlLXMgcG9zc8OpZGFudCB1biBjb21wdGUgQ0FUSUEgKHZvaXIgW2ljaSBwb3VyIGxhIGNyw6lhdGlvbiBkJ3VuIGNvbXB0ZV0oaHR0cHM6Ly9jYXRpbWEudW5pbC5jaC9mci9yZWdpc3RlcikpIGV0IGNvbm5lY3TDqS1lLXMuCgojIyBBam91dCBkJ3VuIGNvbnRlbnUgw6AgbGEgbGlzdGUgZGVzIGZhdm9yaXMKClBvdXIgYWpvdXRlciB1biBjb250ZW51IGF1eCBmYXZvcmlzLCBpbCBzJ2FnaXQgZCdhY2PDqWRlciDDoCBsYSBmaWNoZSBzb3VoYWl0w6llIChwYXIgdW5lIG5hdmlnYXRpb24gZGFucyBsZSBzaXRlIG91IHBhciBwYXIgbGVzIHLDqXN1bHRhdHMgZCd1bmUgcmVjaGVyY2hlKSwgcHVpcyBkZSBjbGlxdWVyIHN1ciBsZSBib3V0b24gIkFqb3V0ZXIgYXV4IGZhdm9yaXMiIHNvdXMgbGUgbm9tIGRlIGxhIGZpY2hlLgoKIVtdKGFzc2V0cy9mYXZzL2FkZF9mYXYucG5nKQoKIyMgQWNjw6hzIMOgIGxhIGxpc3RlIGRlcyBmYXZvcmlzCgpMYSBsaXN0ZSBkZXMgZmF2b3JpcyBlc3QgYWNjZXNzaWJsZSDDoCAKdG91cy10ZSB1dGlsaXNhdGV1ci10cmljZSBpbnNjcml0LWUgZXQgY29ubmVjdMOpIMOgIENhdGltYSwgZW4gY2xpcXVhbnQgc3VjY2Vzc2l2ZW1lbnQgc3VyIAoKMS4gKipOb20gZCd1dGlsaXNhdGV1cioqICh0b3V0IMOgIGRyb2l0ZSBkYW5zIGxhIGJhcnJlIGRlIG5hdmlnYXRpb24pCjIuICoqTWVzIGZhdm9yaXMqKgoKIVtdKGFzc2V0cy9mYXZzL2FjY2Vzc19mYXYucG5nKQoKTGVzIGZhdm9yaXMgc29udCBwcsOpc2VudMOpcyBwYXIgZ3JvdXBlIGVuIGZvbmN0aW9uIGR1IGNhdGFsb2d1ZSBkb250IHByb3ZpZW5uZW50IGxlcyBjb250ZW51cyA6IAoKIVtdKGFzc2V0cy9mYXZzL2Zhdl9saXN0X2dyb3VwMS5wbmcpCgpVbmUgZm9pcyB1biBncm91cGUgY2hvaXNpLCBsYSBsaXN0ZSBkZXMgY29udGVudXMgZmF2b3JpcyBlc3QgcHLDqXNlbnTDqWUsIHBlcm1ldHRhbnQgZCd5IGFjY8OpZGVyIG91IGRlIHN1cHByaW1lciBsZS1zIGZhdm9yaXMgc291aGFpdMOpLXMuCgohW10oYXNzZXRzL2ZhdnMvZmF2X2xpc3RfZ3JvdXAyLnBuZyk=
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:38:22 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/editors.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"07f8ec0ceccf6e8c4a707632e5a83cffe3ea97dc"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - B534:039E:2AC2F0:2D39E2:5BC5E9CD
      Content-Length:
      - '3026'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:38:22 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1531-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1539697103.591133,VS0,VE124
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 973f4bbd0832e7df748116ececb1fa5aa1543662
      Expires:
      - Tue, 16 Oct 2018 13:43:22 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:38:22 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/editors.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"07f8ec0ceccf6e8c4a707632e5a83cffe3ea97dc"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - B534:039E:2AC2F0:2D39E2:5BC5E9CD
      Content-Length:
      - '3026'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:38:22 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1528-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1539697103.820131,VS0,VE0
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 42f31d62147973d84c909e130058401091bf51d5
      Expires:
      - Tue, 16 Oct 2018 13:43:22 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:38:22 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/editors.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"07f8ec0ceccf6e8c4a707632e5a83cffe3ea97dc"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - B534:039E:2AC2F0:2D39E2:5BC5E9CD
      Content-Length:
      - '3026'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:38:22 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1536-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1539697103.911312,VS0,VE0
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 702e4ece8df92e2810c7ab73f300eb0f80702e63
      Expires:
      - Tue, 16 Oct 2018 13:43:22 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        IyBBZmZpY2hhZ2UsIGFqb3V0IGV0IG1vZGlmaWNhdGlvbiBkZSBkb25uw6llcyAKCiMjIFByw6lzZW50YXRpb24KCkxhIHNlY3Rpb24gIkRhdGEiIHBlcm1ldCBsJ2Fqb3V0IGV0IGxhIG1vZGlmaWNhdGlvbiBkZSBkb25uw6llcyBkdSBjYXRhbG9ndWUuIFBvdXIgeSBhY2PDqWRlciwgCmNsaXF1ZXIgc3VyICIqRGF0YSoiIGRhbnMgbGEgYmFycmUgZGUgbWVudXMgbm9pcmUgKGVuIGhhdXQgZHUgbmF2aWdhdGV1cikuIAoKTCdhY2N1ZWlsIGRlIGxhIHNlY3Rpb24gKipEYXRhKiogY29uc2lzdGUgZW4gdW4gYWZmaWNoYWdlIGRlcyBkaWZmw6lyZW50ZXMgZmljaGVzIGV4aXN0YW50ZXMgZGFucyBsYSBiYXJyZSBsYXTDqXJhbGUgZ2F1Y2hlLiAKCiMjIEFmZmljaGFnZSBkZXMgdGFibGVhdXggZGUgZG9ubsOpZXMKCkRhbnMgbGEgc2VjdGlvbiAqRGF0YSogbGEgYmFycmUgbGF0w6lyYWxlIGdhdWNoZSBwZXJtZXQgZCdhY2PDqWRlciBhdXggZG9ubsOpZXMgcGFyIGZpY2hlcy4gVW5lIGZvaXMgbGEgZmljaGUgY2hvaXNpZSwgdW5lIGxpc3RlIGRlcyBkb25uw6llcyBleGlzdGFudGVzIGVzdCBwcsOpc2VudMOpZS4gCgohW10oYXNzZXRzL2RhdGEvZGF0YS5wbmcpCgo+IE5CIDogQ2VydGFpbnMgY2hhbXBzIG9udCBwdSDDqnRyZSBjYWNow6lzIGRhbnMgbGEgY29uZmlndXJhdGlvbiBkdSB0eXBlIGRlIGZpY2hlLiBBaW5zaSBzZXVscyBMZXMgY2hhbXBzIHBvdXIgbGVzcXVlbHMgbCdvcHRpb24gIkluY2x1cmUgbGUgY2hhbXAgZGFucyBsYSBsaXN0ZSBkZXMgZmljaGVzIiBhIMOpdMOpIGFjdGl2w6llIGRhbnMgKioqU2V0dXAqKiogc2Vyb250IGFmZmljaMOpcyBkYW5zIGNldHRlIGxpc3RlLgoKIyMgQWpvdXQgZGUgZG9ubsOpZXMKClBvdXIgYWpvdXRlciBkZXMgZG9ubsOpZXMsIHPDqWxlY3Rpb25uZXIgbGUgdHlwZSBkZSBmaWNoZSBzb3VoYWl0w6kgZGFucyBsYSBiYXJyZSBsYXTDqXJhbGUgZ2F1Y2hlLiBMZXMgw6l2ZW50dWVsbGVzIGRvbm7DqWVzIGV4aXN0YW50ZXMgcydhZmZpY2hlbnQgc291cyBmb3JtZSBkZSB0YWJsZWF1LiBEYW5zIGxlIGNhcyBjb250cmFpcmUsIHVuZSBzZWN0aW9uIHZpZGUgYXBwYXJhw650IGVuIGRlc3NvdXMgZHUgbm9tIGRlIGxhIGZpY2hlLgoKVW5lIGZvaXMgbGEgZmljaGUgc8OpbGVjdGlvbm7DqWUsIGNsaXF1ZXIgc3VyIGxlIGJvdXRvbiAgKipOb3V2ZWF1IHR5cGUgZGUgZmljaGUgIm5vbSBkdSB0eXBlIGRlIGZpY2hlIioqLCBmYWl0IHMnb3V2cmlyIGxhIHBhZ2UgZCdlbnRyw6llIG1hbnVlbGxlIGRlcyBkb25uw6llcywgcXVpIHNlIHByw6lzZW50ZSBzb3VzIGxhIGZvcm1lIGQndW4gZm9ybXVsYWlyZS4KCkVuIHJlbXBsaXNzYW50IGxlcyBzZWN0aW9ucyBkZXMgb2JqZXRzIGF2ZWMgZGVzIGRvbm7DqWVzLCBzZXVsZXMgZGVzIGRvbm7DqWVzIHJlc3BlY3RhbnRzIGxlcyBmb3JtYXRzIGF1dG9yaXPDqXMgKGTDqWZpbmlzIGRhbnMgbGEgY29uZmlndXJhdGlvbikgcGV1dmVudCDDqnRyZSBlbnRyw6llcyAocC5leCBkb25uw6llcyBudW3DqXJpcXVlcywgZS1tYWlsIG91IGRhdGVzKS4KClVuZSBmb2lzIGxlcyBjaGFtcHMgcmVtcGxpcyBhdmVjIGxlcyBkb25uw6llcywgaWwgZXN0IHBvc3NpYmxlIGQnZW5yZWdpc3RyZXIgZXQgcmV0b3VybmVyIGF1IG1lbnUgKkRhdGEqIGF2ZWMgIipDcsOpZXIgZmljaGUgZGUgdHlwZSAnbm9tIGR1IHR5cGUgZGUgZmljaGUnKiIgb3UgZCdlbnJlZ2lzdHJlciBldCBham91dGVyIGRlIG5vdXZlbGxlcyBkb25uw6llcyBhdmVjICIqQ3JlYXRlIGFuZCBhZGQgYW5vdGhlcioiLgoKPiBOQiA6IElsIGVzdCBwb3NzaWJsZSBkJ2FubnVsZXIgw6AgdG91dCBtb21lbnQgZW4gY2xpcXVhbnQgc3VyICJBbm51bGVyIiAoQ2FuY2VsKS4KCiFbXShhc3NldHMvZGF0YS9uZXdfZGF0YV8xLnBuZykgIAohW10oYXNzZXRzL2RhdGEvbmV3X2RhdGFfMi5wbmcpICAKCgpVbmUgZm9pcyBsZXMgY2hhbXBzIHJlbXBsaXMsIGVucmVnaXN0cmVyIGF2ZWMgIiAqRW5yZWdpc3RyZXIgJ25vbSBkdSB0eXBlIGRlIGZpY2hlJyogIi4gVW4gZW5yZWdpc3RyZW1lbnQgbidlc3QgcG9zc2libGUgcXVlIHNpIHRvdXRlcyBsZXMgc2VjdGlvbnMgb2JsaWdhdG9pcmVzIG9udCDDqXTDqSByZW1wbGllcy4gRGFucyBsZSBjYXMgY29udHJhaXJlIHVuIG1lc3NhZ2UgZCdlcnJldXIgYXBwYXJhw650IGV0IGludml0ZSDDoCBjb3JyaWdlciBvdSByZW1wbGlyIGxlcyBjaGFtcHMuCgpVbmUgZm9pcyBsZXMgZG9ubsOpZXMgZW5yZWdpc3Ryw6llcywgY2VsbGVzLWNpIGFwcGFyYWlzc2VudCBkYW5zIGxhIHNlY3Rpb24gKkRhdGEqIHNvdXMgbGEgZm9ybWUgZCd1biB0YWJsZWF1IGRlIGRvbm7DqWVzLiAKCiMjIE1vZGlmaWNhdGlvbiBkZSBkb25uw6llcwoKUG91ciBjaG9pc2lyIGxlcyBkb25uw6llcyDDoCBtb2RpZmllciwgc8OpbGVjdGlvbm5lciBsYSBmaWNoZSBzb3VoYWl0w6llIGRhbnMgbGEgYmFycmUgbGF0w6lyYWxlIGdhdWNoZS4gTGVzIGRvbm7DqWVzIGV4aXN0YW50ZXMgcydhZmZpY2hlbnQgc291cyBmb3JtZSBkJ3VuIHRhYmxlYXUuIFBvdXIgbW9kaWZpZXIgbGEgZmljaGUgc291aGFpdMOpZSwgY2xpcXVlciBzdXIgbGUgYm91dG9uICJBY3Rpb25zIiBwdWlzIHN1ciAiw4lkaXRlciIgOgoKIVtdKGFzc2V0cy9kYXRhL2VkaXRfZGF0YS5wbmcpICAKClBvdXIgbGEgbW9kaWZpY2F0aW9uIGRlIGNoYXF1ZSBjaGFtcCwgbGEgcHJvY8OpZHVyZSBldCBsZXMgcmVtYXJxdWVzIHNvbnQgc2VtYmxhYmxlcyDDoCBsJ2Fqb3V0IGRlIGRvbm7DqWVzICh2b2lyIFtBam91dCBkZSBkb25uw6llc10oI2Fqb3V0LWRlLWRvbm7DqWVzKSkuCgpVbmUgZm9pcyBsZXMgbW9kaWZpY2F0aW9ucyB0ZXJtaW7DqWVzLCBlbnJlZ2lzdHJlciBhdmVjICIgKkVucmVnaXN0cmVyICdub20gZHUgdHlwZSBkZSBmaWNoZScqICIuIFVuIGVucmVnaXN0cmVtZW50IG4nZXN0IHBvc3NpYmxlIHF1ZSBzaSB0b3V0ZXMgbGVzIHNlY3Rpb25zIG9ibGlnYXRvaXJlcyBvbnQgw6l0w6kgcmVtcGxpZXMuIERhbnMgbGUgY2FzIGNvbnRyYWlyZSB1biBtZXNzYWdlIGQnZXJyZXVyIGFwcGFyYcOudCBldCBpbnZpdGUgw6AgY29ycmlnZXIgb3UgcmVtcGxpciBsZXMgY2hhbXBzLgoKVW5lIGZvaXMgbGVzIGRvbm7DqWVzIGVucmVnaXN0csOpZXMsIGNlbGxlcy1jaSBhcHBhcmFpc3NlbnQgZGFucyBsYSBzZWN0aW9uICpEYXRhKiBzb3VzIGxhIGZvcm1lIGQndW4gdGFibGVhdSBkZSBkb25uw6llcy4gCgojIyBEdXBsaWNhdGlvbiBkZSBkb25uw6llcwoKSWwgZXN0IHBvc3NpYmxlIGRlIGR1cGxpcXVlciB1bmUgZmljaGUgZW4gY2xpcXVhbnQgc3VyIGxlIGJvdXRvbiAiQWN0aW9ucyIgcHVpcyBzdXIgIkR1cGxpcXVlciIgOiAKCiFbXShhc3NldHMvZGF0YS9kdXBsaWNhdGVfZGF0YS5wbmcpICAKCkNlbGEgb3V2cmUgbGEgbcOqbWUgcGFnZSBxdWUgcG91ciBsJ2Fqb3V0IGRlIGRvbm7DqWVzLCBhdmVjIGxlcyBkb25uw6llcyBkZSBsYSBmaWNoZSBkdXBsaXF1w6llLCBxdSdpbCBlc3QgcG9zc2libGUgZGUgbW9kaWZpZXIuCgpVbmUgZm9pcyBsZXMgY2hhbXBzIG1vZGlmacOpcywgaWwgZXN0IHBvc3NpYmxlIGQnZW5yZWdpc3RyZXIgZXQgcmV0b3VybmVyIGF1IG1lbnUgKkRhdGEqIGF2ZWMgIipDcsOpZXIgZmljaGUgZGUgdHlwZSAnbm9tIGR1IHR5cGUgZGUgZmljaGUnKiIgb3UgZCdlbnJlZ2lzdHJlciBldCBham91dGVyIGRlIG5vdXZlbGxlcyBkb25uw6llcyBhdmVjICIqQ3JlYXRlIGFuZCBhZGQgYW5vdGhlcioiLgoKIyBFeGVtcGxlIGQnYWpvdXQgZGUgZG9ubsOpZXMgZGFucyB1biBjYXRhbG9ndWUKCkFmaW4gZCdpbGx1c3RyZXIgbCdham91dCBkZSBkb25uw6llcyBkYW5zIHVuIGNhdGFsb2d1ZSwgdm9pY2kgdW4gZXhlbXBsZSByZXByZW5hbnQgdG91dGVzIGxlcyDDqXRhcGVzIGTDqWNyaXRlcyBqdXNxdSfDoCBwcsOpc2VudC4gQ2V0IGV4ZW1wbGUgY29uc2lzdGUgZW4gdW4gY2F0YWxvZ3VlIHJlY2Vuc2FudCBsZXMgdW5pdmVyc2l0w6lzIHJvbWFuZGVzIGV0IGRlIGxldXJzIGJpYmxpb3Row6hxdWVzIGFmaW4gZGUgbGVzIHJlcHLDqXNlbnRlciBzdXIgdW5lIGNhcnRlIGfDqW9ncmFwaGlxdWUuCgojIyBDb25jZXB0CgpMZXMgaW5mb3JtYXRpb25zIHF1ZSBsZSBjYXRhbG9ndWUgZGV2cmEgY29udGVuaXIgw6AgbGEgZmluIHNvbnQgbGVzIHN1aXZhbnRlcyA6IAoKfCAgfCBVbml2ZXJzaXTDqSBkZSBGcmlib3VyZyB8IFVuaXZlcnNpdMOpIGRlIEdlbsOodmUgfCBVbml2ZXJzaXTDqSBkZSBMYXVzYW5uZSB8IFVuaXZlcnNpdMOpIGRlIE5ldWNow6J0ZWwgfAp8LS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfAp8IEFiYnLDqXZpYXRpb24gfCBVTklGUiB8IFVOSUdFIHwgVU5JTCB8IFVOSU5FIHwKfCBMb2NhbGl0w6kgfCBGcmlib3VyZyB8IEdlbsOodmUgfCBMYXVzYW5uZSB8IE5ldWNow6J0ZWwgfAp8IELDonRpbWVudHMgfCBVbmkgQmVhdXJlZ2FyZCwgVW5pIE1pc8Opcmljb3JkZSwgVW5pIFDDqXJvbGxlcywgVW5pIFLDqWdpbmEgTXVuZGkgfEJhdHRlbGxlLCBDYW1wdXMgQmlvdGVjaCwgQ01VLCBMZXMgUGhpbG9zb3BoZXMsIFNjaWVuY2VzLCBVbmkgQmFzdGlvbiwgVW5pIENhcmwgVm9ndCwgVW5pIER1Zm91ciwgVW5pIE1haWwsIFVuaSBQaWdub24gfEFtcGhpbWF4LCBBbXBoaXDDtGxlLCBBbnRocm9wb2xlLCBCYXRvY2hpbWUsIEJpb3Bob3JlLCBDdWJvdHJvbiwgR8Opbm9wb2RlLCBJbnRlcm5lZiwgVW5pY2VudHJlLCBVbml0aMOocXVlfFJ1ZSBkZSBTYWludC1OaWNvbGFzIDQsIFBsYWNlIE51bWEtRHJveiAzLCBDaGF1c3PDqWUgZGUgbGEgQm9pbmUgMjAgLCBGYmcgZHUgTGFjIDVhLCBBdi4gRHVQZXlyb3UgMSwgZXRjLi4gfAp8IEZhY3VsdMOpcyB8RHJvaXQsIExldHRyZXMgZXQgc2NpZW5jZXMgaHVtYWluZXMsIFNjaWVuY2VzIGV0IG3DqWRlY2luZSwgU2NpZW5jZXMgw6ljb25vbWlxdWVzIGV0IHNvY2lhbGVzLCBUaMOpb2xvZ2llIHxEcm9pdCwgw4ljb25vbWllIGV0IG1hbmFnZW1lbnQsIExldHRyZXMsIE3DqWRlY2luZSwgUHN5Y2hvbG9naWUgZXQgc2NpZW5jZXMgZGUgbCfDqWR1Y2F0aW9uLCBTY2llbmNlcywgU2NpZW5jZXMgZGUgbGEgc29jacOpdMOpLCBUaMOpb2xvZ2llIHxCaW9sb2dpZSBldCBtw6lkZWNpbmUsIERyb2l0LCBzY2llbmNlcyBjcmltaW5lbGxlcyBldCBhZG1pbmlzdHJhdGlvbiBwdWJsaXF1ZSwgR8Opb3NjaWVuY2VzIGV0IGVudmlyb25uZW1lbnQsIEhhdXRlcyDDqXR1ZGVzIGNvbW1lcmNpYWxlcywgTGV0dHJlcywgU2NpZW5jZXMgc29jaWFsZXMgZXQgcG9saXRpcXVlcywgVGjDqW9sb2dpZSBldCBzY2llbmNlcyBkZXMgcmVsaWdpb25zICB8RHJvaXQsIExldHRyZXMgZXQgc2NpZW5jZXMgaHVtYWluZXMsIFNjaWVuY2VzLFNjaWVuY2VzIMOpY29ub21pcXVlcyB8CnwgTm9tYnJlIGQnw6l0dWRpYW50cyB8IDEwNDE0IHwgIDE2OTM1IHwgMTQ5NzYgfCA0Mjg0IHwKfCBCaWJsaW90aMOocXVlIHwgQmlibGlvdGjDqHF1ZSBjYW50b25hbGUgZXQgdW5pdmVyc2l0YWlyZSAoRnJpYm91cmcpIHwgQmlibGlvdGjDqHF1ZSBkZSBsJ1VuaXZlcnNpdMOpIGRlIEdlbsOodmUgfCBCaWJsaW90aMOocXVlIGNhbnRvbmFsZSBldCB1bml2ZXJzaXRhaXJlIChMYXVzYW5uZSkgfCBCaWJsaW90aMOocXVlcyBVbmlORSB8CnwgQWRyZXNzZSB8IEF2ZW51ZSBkZSBsJ0V1cm9wZSAyMCwgMTcwMCBGcmlib3VyZyB8IDI0IHJ1ZSBkdSBHw6luw6lyYWwtRHVmb3VyLCAgIDEyMTEgR2Vuw6h2ZSA0IHwgVW5pY2VudHJlLCAxMDE1IExhdXNhbm5lIHwgQXZlbnVlIGR1IDFlci1NYXJzIDI2LCAyMDAwIE5ldWNow6J0ZWwgfAp8IFNpdGUgd2ViIHwgd3d3LnVuaWZyLmNoIHwgd3d3LnVuaWdlLmNoIHwgd3d3LnVuaWwuY2ggfCB3d3cudW5pbmUuY2ggfAoKRGFucyBjZXQgZXhlbXBsZSwgbGVzIGNvbmNlcHRzIGQnVW5pdmVyc2l0w6kgZXQgZGUgQmlibGlvdGjDqHF1ZSBzb250IGNlbnRyYXV4IGRhbnMgY2UgY2F0YWxvZ3VlLiAKCkNvbmNlcHR1ZWxsZW1lbnQsIHZvaWNpIGxlcyBlbnRpdMOpcyBxdWkgY29tcG9zZW50IGNlIGNhdGFsb2d1ZSBldCBsZXMgY2hhbXBzIHF1J2lsIHMnYWdpcmEgZGUgcmVtcGxpci4KCnxMb2NhbGl0w6kKfC0tLQp8Tm9tIGRlIGxhIGxvY2FsaXTDqQp8Q2FudG9uCnxQb3B1bGF0aW9uCi0tLQoKfFVuaXZlcnNpdMOpCnwtLS0KfE5vbSBkZSBsJ1VuaXZlcnNpdMOpCnxBYmJyw6l2aWF0aW9uCnxMb2NhbGl0w6kgPT0+ICoqY29uY2VwdCAiTG9jYWxpdMOpIioqCnxGYWN1bHTDqXMKfE5vbWJyZSBkJ8OpdHVkaWFudHMKfFBob3RvZ3JhcGhpZXMKfEFkcmVzc2UKfFNpdGUgd2ViCi0tLS0KCnxCw6J0aW1lbnQKfC0tLQp8Tm9tIGR1IGLDonRpbWVudAp8TG9jYWxpc2F0aW9uIGfDqW9ncmFwaGlxdWUKfFVuaXZlcnNpdMOpID09PiAqKmNvbmNlcHQgIlVuaXZlcnNpdMOpIioqCi0tLQoKfEJpYmxpb3Row6hxdWUKfC0tLQp8Tm9tIGRlIGxhIGJpYmxpb3Row6hxdWUKfEFiYnLDqXZpYXRpb24KfFLDqXNlYXUKfELDonRpbWVudCA9PT4gKipjb25jZXB0ICJCw6J0aW1lbnQiKioKfFVuaXZlcnNpdMOpICA9PT4gKipjb25jZXB0ICJVbml2ZXJzaXTDqSIqKgotLS0KCiMjIyBUeXBlcyBkZSBmaWNoZXMgZXQgbGllbnMKCkxlcyBxdWF0cmUgY29uY2VwdHMgcHLDqWPDqWRlbWVudHMgcmVsZXbDqXMsICJVbml2ZXJzaXTDqSIsICJCaWJsaW90aMOocXVlIiwgIkxvY2FsaXTDqSIsICJCw6J0aW1lbnQiLCBjb3JyZXNwb25kZW50IGF1eCB0eXBlcyBkZSBmaWNoZXMgZXhpc3RhbnRzIGRhbnMgQ2F0aW1hLgoKKipMaWVucyBjb25jZXB0dWVscyBlbnRyZSBsZXMgdHlwZXMgZGUgZmljaGVzIDoqKgoKKiBVbmUgKipsb2NhbGl0w6kqKiBhIHVuZSBldCB1bmUgc2V1bGUgKip1bml2ZXJzaXTDqSoqCiogVW5lICoqdW5pdmVyc2l0w6kqKiBhIHVuZSwgb3UgcGx1c2lldXJzICoqYmlibGlvdGjDqHF1ZShzKSoqCiogVW5lICoqdW5pdmVyc2l0w6kqKiBhIHVuLCBvdSBwbHVzaWV1cnMgKipiw6J0aW1lbnQocykqKgoKIyMjIEFqb3V0IGQndW5lIGZpY2hlCgpMZSBjb25jZXB0IGRlICJMb2NhbGl0w6kiIMOpdGFudCBsZSBjb25jZXB0IGxlIHBsdXMgbGFyZ2UgKHVuIGLDonRpbWVudCBzZSBzaXR1ZSBkYW5zIHVuZSB1bml2ZXJzaXTDqSwgcXVpIGVzdCBkYW5zIHVuZSBsb2NhbGl0w6kpLCBpbCBlbmdsb2JlIGxlcyBjb25jZXB0cyBwbHVzIHByw6ljaXMgcXVlIGx1aSwgw6Agc2F2b2lyICJVbml2ZXJzaXTDqSIsIHF1aSBsdWktbcOqbWUgZW5nbG9iZSBsZXMgIkLDonRpbWVudHMiIGV0IGxlcyAiQmlibGlvdGjDqHF1ZXMiLiBDJ2VzdCBwb3VycXVvaSBpbCBlc3QganVkaWNpZXV4IGQnYWpvdXRlciBkJ2Fib3JkIGRlcyBmaWNoZXMgYXV4IGVudGl0w6lzIGxlcyBwbHVzIGxhcmdlcywgaWNpICJMb2NhbGl0w6kiLiBBaW5zaSBsb3JzIGRlIGwnYWpvdXQgZCd1bmUgbm91dmVsbGUgdW5pdmVyc2l0w6kgKHB1aXMgZGUgbm91dmVhdXggYsOidGltZW50cyBldCBiaWJsaW90aMOocXVlcykgaWwgZXhpc3RlcmEgdG91am91cnMgbCdlbnRpdMOpIHBsdXMgZ2xvYmFsZSDDoCBsYXF1ZWxsZSBmYWlyZSByw6lmw6lyZW5jZS4gCgpMYSBzdHJ1Y3R1cmUgZHUgY2F0YWxvZ3VlIGEgw6l0w6kgY3LDqWUgZGFucyBjZXQgZXhlbXBsZSBwYXIgbCdhZG1pbnN0cmF0ZXVyLXRyaWNlIGR1IGNhdGFsb2d1ZS4gTGEgdMOiY2hlIGljaSBlc3QgZCdham91dGVyIGRlIG5vdXZlbGxlcyBkb25uw6llcyBlbiBzdWl2YW50IGxhIHN0cnVjdHVyZSBleGlzdGFudGUuIAoKQWluc2kgcG91ciBham91dGVyIHVuZSBub3V2ZWxsZSBsb2NhbGl0w6kgOiBkYW5zIGxhIHNlY3Rpb24gIkRhdGEiIGRlIENhdGltYSwgc8OpbGVjdGlvbm5lciAiTG9jYWxpdMOpcyIgZGFucyBsYSBjb2xvbm5lIGxhdMOpcmFsZSBnYXVjaGUuIAoKVW5lIGxpc3RlIGRlcyBsb2NhbGl0w6lzIGV4aXN0YW50ZSBzJ2FmZmljaGUgOiAKCiFbXShhc3NldHMvZGF0YS9uZXdfZGF0YV9leDEucG5nKSAgCgpDbGlxdWVyIHN1ciAiKyBOb3V2ZWF1IHR5cGUgZGUgZmljaGUgJ0xvY2FsaXTDqSciIHB1aXMgcmVtcGxpciB0b3VzIGxlcyBjaGFtcHMgbsOpY2Vzc2FpcmVzIDogCgohW10oYXNzZXRzL2RhdGEvbmV3X2RhdGFfZXgyLnBuZykgIAoKVW5lIGZvaXMgbGEgbG9jYWxpdMOpIGNyw6nDqWUsIGlsIGVzdCBwb3NzaWJsZSBkZSBsdWkgYWpvdXRlciBsJ1VuaXZlcnNpdMOpIGRhbnMgbGEgbG9jYWxpdMOpIGRlIExhdXNhbm5lIDoKCiFbXShhc3NldHMvZGF0YS9uZXdfZGF0YV9leDMucG5nKSAgCgpQdWlzIGQnYWpvdXRlciBsZXMgZG9ubsOpZXMgZGVzIGF1dHJlcyB0eXBlcyBkZSBmaWNoZXMgIkLDonRpbWVudHMiIGV0ICJCaWJsaW90aMOocXVlcyIgOiAKCiFbXShhc3NldHMvZGF0YS9uZXdfZGF0YV9leDQucG5nKSAgCgo=
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:38:22 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/admin.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"0294a25e16afa7d793cb23f38c7baf5dbd63d827"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - B5E8:0B47:BD0E3:D3249:5BC5E9CE
      Content-Length:
      - '9627'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:38:23 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1539-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1539697103.014228,VS0,VE159
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - be5fa905af2abc776d953255396b5608a49d01e6
      Expires:
      - Tue, 16 Oct 2018 13:43:23 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:38:23 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/admin.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"0294a25e16afa7d793cb23f38c7baf5dbd63d827"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - B5E8:0B47:BD0E3:D3249:5BC5E9CE
      Content-Length:
      - '9627'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:38:23 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1539-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1539697103.266051,VS0,VE0
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 920d4192a40988b6527438461ceaa052d133bcd3
      Expires:
      - Tue, 16 Oct 2018 13:43:23 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:38:23 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/fr/admin.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Etag:
      - '"0294a25e16afa7d793cb23f38c7baf5dbd63d827"'
      Content-Type:
      - text/plain; charset=utf-8
      Cache-Control:
      - max-age=300
      X-Geo-Block-List:
      - ''
      X-Github-Request-Id:
      - B5E8:0B47:BD0E3:D3249:5BC5E9CE
      Content-Length:
      - '9627'
      Accept-Ranges:
      - bytes
      Date:
      - Tue, 16 Oct 2018 13:38:23 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1526-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1539697103.358399,VS0,VE1
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 25b8720c96effd9a560fc9080837f4b6a28f2d2b
      Expires:
      - Tue, 16 Oct 2018 13:43:23 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 16 Oct 2018 13:38:23 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/en/introduction.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - E7DC:77F5:E9D67:F9F3A:5BDACA46
      Content-Length:
      - '15'
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 01 Nov 2018 09:41:26 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1544-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1541065286.147880,VS0,VE131
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - c40e3eacf0bc8fa324b193d90ea018f046231414
      Expires:
      - Thu, 01 Nov 2018 09:46:26 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found

'
    http_version: 
  recorded_at: Thu, 01 Nov 2018 09:41:26 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/en/introduction.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - E7DC:77F5:E9D67:F9F3A:5BDACA46
      Content-Length:
      - '15'
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 01 Nov 2018 09:41:26 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1536-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1541065286.332523,VS0,VE1
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - f5d4445fdbd0c17be22dceeab9154bb5345a1ce0
      Expires:
      - Thu, 01 Nov 2018 09:46:26 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found

'
    http_version: 
  recorded_at: Thu, 01 Nov 2018 09:41:26 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/en/guest.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 9E28:2A1F:146FB1:15EA91:5BDACA46
      Content-Length:
      - '15'
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 01 Nov 2018 09:41:26 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1523-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1541065286.395694,VS0,VE137
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 0f1e15862a2aaeb3e0052d6a0f95f143cd7f03c6
      Expires:
      - Thu, 01 Nov 2018 09:46:26 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found

'
    http_version: 
  recorded_at: Thu, 01 Nov 2018 09:41:26 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/en/guest.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 9E28:2A1F:146FB1:15EA91:5BDACA46
      Content-Length:
      - '15'
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 01 Nov 2018 09:41:26 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1549-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1541065287.585244,VS0,VE0
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 3d4e5a8076cf3bff303732db4d129a0d5eea19e4
      Expires:
      - Thu, 01 Nov 2018 09:46:26 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found

'
    http_version: 
  recorded_at: Thu, 01 Nov 2018 09:41:26 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/en/user.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 6522:3CF2:F787E:1161B1:5BDACA46
      Content-Length:
      - '15'
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 01 Nov 2018 09:41:26 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1535-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1541065287.643360,VS0,VE131
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 5beeac6903955056e54143cdafac47c35f6c17a8
      Expires:
      - Thu, 01 Nov 2018 09:46:26 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found

'
    http_version: 
  recorded_at: Thu, 01 Nov 2018 09:41:26 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/en/user.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 6522:3CF2:F787E:1161B1:5BDACA46
      Content-Length:
      - '15'
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 01 Nov 2018 09:41:26 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1528-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1541065287.831735,VS0,VE0
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 417665dbaff90b305b9b5b86b867bdf52623b0f9
      Expires:
      - Thu, 01 Nov 2018 09:46:26 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found

'
    http_version: 
  recorded_at: Thu, 01 Nov 2018 09:41:26 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/en/editors.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 6522:3CF2:F7886:1161B8:5BDACA46
      Content-Length:
      - '15'
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 01 Nov 2018 09:41:27 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1531-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1541065287.908946,VS0,VE133
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - d93d7098b7f8fc3a225b96e4ebd8d731c8e38e69
      Expires:
      - Thu, 01 Nov 2018 09:46:27 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found

'
    http_version: 
  recorded_at: Thu, 01 Nov 2018 09:41:27 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/en/editors.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 6522:3CF2:F7886:1161B8:5BDACA46
      Content-Length:
      - '15'
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 01 Nov 2018 09:41:27 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1539-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1541065287.098534,VS0,VE2
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 1808d40af292b89078cb49f6b339291143f699f5
      Expires:
      - Thu, 01 Nov 2018 09:46:27 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found

'
    http_version: 
  recorded_at: Thu, 01 Nov 2018 09:41:27 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/en/admin.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - FA9E:439A:2CD657:2E820B:5BDACA47
      Content-Length:
      - '15'
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 01 Nov 2018 09:41:27 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1536-HHN
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1541065287.162112,VS0,VE137
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 5e20684047d3d94ffcf76f6f33241ea2498f76f1
      Expires:
      - Thu, 01 Nov 2018 09:46:27 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found

'
    http_version: 
  recorded_at: Thu, 01 Nov 2018 09:41:27 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/catima/userdoc/development/en/admin.md
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - FA9E:439A:2CD657:2E820B:5BDACA47
      Content-Length:
      - '15'
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 01 Nov 2018 09:41:27 GMT
      Via:
      - 1.1 varnish
      Connection:
      - keep-alive
      X-Served-By:
      - cache-hhn1526-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1541065287.354256,VS0,VE0
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 7b9c8f6ca0d50304113d4e4c05343bc96c7e97e7
      Expires:
      - Thu, 01 Nov 2018 09:46:27 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found

'
    http_version: 
  recorded_at: Thu, 01 Nov 2018 09:41:27 GMT
recorded_with: VCR 4.0.0

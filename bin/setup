#!/usr/bin/env ruby

def setup(ci)
  within_project_root do
    # During CI we do not check the ruby version to allows
    # testing against multiple versions
    test "ruby -v" => ruby_version unless ci
    run  "gem install bundler:2.1.4 --no-document --conservative"
    run  "bundle install"  if File.exist?("Gemfile.lock")
    run  "bin/yarn install" if File.exist?("yarn.lock")
    run  "bundle exec overcommit --sign"
    run  "bundle exec overcommit --install"
    copy "example.env"
    copy "config/database.example.yml"
    copy "config/geo_layers.example.yml"
    copy "config/domains.example.yml"
    test_local_env_contains_required_keys
    run  "bundle exec rake locales:generate"
    run  "bundle exec rake db:prepare"
  end
end

require "fileutils"
begin
  require "highline"
rescue LoadError
  # If highline is missing, we'll gracefully omit ansi color output
end

def within_project_root(&block)
  Dir.chdir(File.expand_path("../..", __FILE__), &block)
end

def test(opts)
  command, output = opts.first

  log(:yellow, "test #{command}") do
    unless `#{command}`.include?(output)
      die("#{command} does not include #{output}")
    end
  end
end

def ruby_version
  @ruby_version ||= begin
    IO.read(".ruby-version").strip
  end
end

def run(command)
  log(:blue, "run  #{command}") do
    shell = "#{command} > /dev/null"
    with_clean_bundler_env do
      system(shell) or die("#{command} exited with non-zero status")
    end
  end
end

def with_clean_bundler_env(&block)
  return block.call unless defined?(Bundler)
  Bundler.with_unbundled_env(&block)
end

def copy(example_path)
  copy_path = example_path.sub(/\.?example/, "")
  return if File.exist?(copy_path)

  log(:magenta, "copy #{example_path} → #{copy_path}") do
    FileUtils.cp(example_path, copy_path)
  end
end

def test_local_env_contains_required_keys
  keys = ->(f) { IO.readlines(f).map { |l| l[/^([^#\s][^=\s]*)/, 1] }.compact }

  log(:yellow, "test .env contents") do
    missing = keys["example.env"] - keys[".env"]
    if missing.any?
      die("Your .env file is missing #{missing.join(', ')}")
    end
  end
end

def log(color, message, out=$stdout, &block)
  if defined?(HighLine::String)
    message.sub!(/^(\S*)/) { HighLine::String.new($1).public_send(color) }
  end

  if block_given?
    out.print("#{message}… ")
    yield
    log(:green, "✔︎")
  else
    out.puts(message)
  end
end

def die(message)
  puts
  log(:red, "FAIL #{message}", $stderr)
  exit(1)
end

setup(ENV['CI'])
